import { useCallback, useContext, useEffect, useState } from 'react';
import { useMatch } from 'react-router-dom';
import { filterMovies } from '../utils/lib/filterMovies';
import { AppRoutes } from '../utils/configs/router';
import {
  LOCALSTORAGE_SEARCH_CHECKBOX,
  LOCALSTORAGE_SEARCH_DATA,
  LOCALSTORAGE_SEARCH_STRING
} from '../utils/constants';
import { MoviesContext } from '../contexts/MoviesContext';

export const useSearch = () => {
  // –¥–µ—Ä–≥–∞–µ–º —Å—Ç–µ–π—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const { savedMovies } = useContext(MoviesContext);
  // —Å—Ç–µ–π—Ç —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å–º–∞–º–∏, –≥–æ—Ç–æ–≤—ã–º–∏ –∫ —Ä–µ–Ω–¥–µ—Ä—É
  const [ filteredMovies, setFilteredMovies ] = useState([]);
  // —Å—Ç–µ–π—Ç —Å –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const [ searchParams, setSearchParams ] = useState({
    string: '', checkbox: false,
  });
  // —Å—Ç–µ–π—Ç—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–∏—Å–∫–∞
  const [ isLoading, setIsLoading ] = useState(false);
  const [ errorMessage, setErrorMessage ] = useState('');

  // –º—ç—Ç—á–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü
  const isMoviePath = useMatch(AppRoutes.movies);
  const isSavedMoviePath = useMatch(AppRoutes.savedMovies);

  useEffect(() => {
    if (isMoviePath) {
      const savedData = JSON.parse(localStorage.getItem(LOCALSTORAGE_SEARCH_DATA));
      setFilteredMovies(savedData || []);
      setSearchParams({
        string: JSON.parse(localStorage.getItem(LOCALSTORAGE_SEARCH_STRING)) || '',
        checkbox: JSON.parse(localStorage.getItem(LOCALSTORAGE_SEARCH_CHECKBOX)) || false
      });

      setErrorMessage(savedData ? '' : '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.');
    }

    if (isSavedMoviePath) {
      setErrorMessage(savedMovies.data.length > 0 ? '' : '–£–ø—Å, —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç...');

      const data = filterMovies(savedMovies.data, searchParams.string, searchParams.checkbox);
      setFilteredMovies(data);

      if (savedMovies.data.length > 0 && data.length === 0) {
        setErrorMessage('–° —Ç–∞–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –±–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.');
      }
    }
  }, [ isMoviePath, isSavedMoviePath, savedMovies.data ]);

  // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
  const saveSearchResults = useCallback((moviesData, searchString, isShortMovie) => {
    if (isMoviePath) {
      localStorage.setItem(LOCALSTORAGE_SEARCH_STRING, JSON.stringify(searchString));
      localStorage.setItem(LOCALSTORAGE_SEARCH_CHECKBOX, JSON.stringify(isShortMovie));
      localStorage.setItem(LOCALSTORAGE_SEARCH_DATA, JSON.stringify(moviesData));
    }
    setSearchParams({ string: searchString, checkbox: isShortMovie });
    setFilteredMovies(moviesData);
  }, [ setSearchParams, setFilteredMovies, isMoviePath ]);

  // –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleSearch = useCallback((movies, searchString, isShortMovie) => {
    setIsLoading(true);
    // –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–æ–≤
    setErrorMessage('');

    // –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
    const newMovieList = filterMovies(movies, searchString, isShortMovie);

    // –∏–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É
    setTimeout(() => {
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      saveSearchResults(newMovieList, searchString, isShortMovie);
      setIsLoading(false);

      // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
      if (newMovieList.length === 0) {
        setErrorMessage('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòü');
      }
    }, 200);

  }, [ setFilteredMovies, filterMovies, saveSearchResults, setErrorMessage, setIsLoading ]);

  return {
    filteredMovies,
    handleSearch,
    searchParams,
    setSearchParams,
    isLoading,
    errorMessage,
  };
};
